<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo搭建博客</title>
    <url>/2019/11/14/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>第一步：你要先创建一个github</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20191114190243886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTEzNTY5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>第二步：创建一个项目</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20191114190350291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTEzNTY5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>第三步：新建一个名为你的用户名.github.io的仓库，例如，你的github用户名为user，就新建一个名为user.github.io的仓库（强制要求哦），将来你的网站访问地址就为：<a href="http://user.github.io" target="_blank" rel="noopener">http://user.github.io</a> 并且一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20191114191625935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTEzNTY5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>第四步：在github上打开你的工程，点击 Settings </p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20191114191745892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTEzNTY5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>第五步：填写域名  save就行</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20191114191843836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTEzNTY5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>第六步：桌面点击Git Bash Here   (还要安装一下git  后期要上传到仓库)</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20191114194413946.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>第七步安装(无脑回车)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"shaoshanhuan@163.com"</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>第八步：在你的C盘 -&gt; 找到User(用户) -&gt; 打开.ssh -&gt; 复制里面的密钥</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20191114192508964.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>第九步：将密钥复制到github</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20191114193235471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTEzNTY5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>第十步：创建密钥</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20191114193329901.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>第十一步：将密钥粘贴</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2019111419343634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTEzNTY5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>第十二布测试是否成功</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ssh -T git@github.com </span><br><span class="line">Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</span><br><span class="line">Hi ***! Yo<span class="string">u've successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string">看到这个显示SSH配置成功了</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>第十三步</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ git config --<span class="keyword">global</span> user.name <span class="string">"***"</span>// 你的github用户名，非昵称</span><br><span class="line">$ git config --<span class="keyword">global</span> user.email  <span class="string">"xxx@qq.com"</span>// 填写你的github注册邮箱</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第十四步安装Hexo：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第十五步创建Hexo项目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ cd d:/hexo  // 这个命令表示终端切换到d盘hexo目录下</span><br><span class="line">$ hexo init blog  // 初始化项目 项目名称为blog 这个过程可能会花费一些时间</span><br><span class="line">$ cd blog   // 切换到blog目录下</span><br><span class="line">$ npm install   // 这一步是安装所需的依赖</span><br><span class="line">$ hexo g <span class="comment"># 或者hexo generate  //生成静态文件</span></span><br><span class="line">$ hexo s <span class="comment"># 或者hexo server    //然后就可以在浏览器输入http://localhost:4000/ 就可以在本地查看初始化的项目了</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在网页输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20191114194546484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTEzNTY5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>挺丑的是吧   哈哈   可以换主题的</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">https://hexo.io/themes/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>打开终端在d:/hexo/bolg/themes目录下，输入如下命令下载主题</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Haojen/hexo-theme-Anisina.git</span><br></pre></td></tr></table></figure>

<blockquote>
<p>更改主题</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20191114195200434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTEzNTY5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="里面的细节在下载主题里都有详细接收"><a href="#里面的细节在下载主题里都有详细接收" class="headerlink" title="里面的细节在下载主题里都有详细接收"></a>里面的细节在下载主题里都有详细接收</h1><blockquote>
<p>部署至仓库</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ hexo g <span class="comment"># 或者hexo generate  //生成静态文件 每次更新了文章都要执行这步重新生成一下静态文件</span></span><br><span class="line">$ hexo s <span class="comment"># 或者hexo server    //然后就可以在浏览器输入http://localhost:4000/ 就可以在本地查看初始化的项目了</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在部署之前我们需要安装hexo-deployer-git</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行部署命令</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ hexo g <span class="comment"># 或者hexo generate  //生成静态文件 每次更新了文章都要执行这步重新生成一下静态文件 无论是本地查看还是部署到github上</span></span><br><span class="line">$ hexo d //部署上线</span><br></pre></td></tr></table></figure>

<h1 id="之后就可以根据你的用户名-github-io访问自己的博客了"><a href="#之后就可以根据你的用户名-github-io访问自己的博客了" class="headerlink" title="之后就可以根据你的用户名.github.io访问自己的博客了"></a>之后就可以根据你的用户名.github.io访问自己的博客了</h1>]]></content>
  </entry>
  <entry>
    <title>无需插件手写分页</title>
    <url>/2019/11/14/%E6%97%A0%E9%9C%80%E6%8F%92%E4%BB%B6%E6%89%8B%E5%86%99%E5%88%86%E9%A1%B5/</url>
    <content><![CDATA[<h2 id="后端-用Django写的"><a href="#后端-用Django写的" class="headerlink" title="后端  用Django写的"></a>后端  用Django写的</h2><blockquote>
<p>View.py  视图</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render  <span class="comment"># 渲染django模板</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *			<span class="comment"># 导入表</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView   <span class="comment"># 导入休息框架   接口框架</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response	<span class="comment"># 接收字典数据</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> Serializer,ModelSerializer  <span class="comment"># 烦啊序列化</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""PageNotAnInteger   报错页码不是整型"""</span></span><br><span class="line"><span class="string">"""EmptyPage  报错页码为空 """</span></span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator,PageNotAnInteger,EmptyPage <span class="comment"># 导入django'自带的分页模块</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">数据反序列化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">序列化 负责添加数据</span></span><br><span class="line"><span class="string">反序列化 负责查询数据</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksModelSerializer</span><span class="params">(ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Books   <span class="comment"># 绑定表</span></span><br><span class="line">        fields = <span class="string">'__all__'</span>  <span class="comment"># 查询字段为全部</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksList</span><span class="params">(APIView)</span>:</span>   <span class="comment"># 定义一个类  继承rest_framework</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span>  <span class="comment"># get请求    常见请求分为  get 和 post请求</span></span><br><span class="line">        mes = &#123;&#125;   <span class="comment"># 定义一个空字典</span></span><br><span class="line">        <span class="string">"""获取传递的页码"""</span></span><br><span class="line">        page_num = request.query_params.get(<span class="string">'page_num'</span>) </span><br><span class="line">        print(page_num)</span><br><span class="line">        <span class="string">"""判断页码不存在"""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> page_num:</span><br><span class="line">            page_num = <span class="number">1</span>  <span class="comment">#  默认为第一页</span></span><br><span class="line">        <span class="string">"""查询全部书籍"""</span></span><br><span class="line">        books = Books.objects.all()</span><br><span class="line"></span><br><span class="line">        <span class="string">""" 在数据中 每页显示几条数据 """</span></span><br><span class="line">        p = Paginator(books,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="string">""" 通过页码显示  数据 """</span></span><br><span class="line">            books_data = p.get_page(page_num)</span><br><span class="line">        <span class="keyword">except</span> PageNotAnInteger:  <span class="comment"># 当传递的页码不是一个整型时   默认为第一页数据</span></span><br><span class="line">            books_data = p.get_page(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span> EmptyPage:   <span class="comment"># 当传递的页码为空时  默认为第一页数据</span></span><br><span class="line">            books_data = p.get_page(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        b = BooksModelSerializer(books_data,many=<span class="literal">True</span>)   <span class="comment"># 返序列化  将数据转为json类型数据   因为每个语言之间只有json类型数据是公认的 </span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;  <span class="comment"># 返回跨域的数据</span></span><br><span class="line">            <span class="string">'code'</span> : <span class="number">200</span>,  <span class="comment"># 状态码 </span></span><br><span class="line">            <span class="string">'bookslist'</span> : b.data,   <span class="comment"># 数据</span></span><br><span class="line">            <span class="string">'num_pages'</span> : p.num_pages,   <span class="comment"># 最大页码</span></span><br><span class="line">            <span class="string">'page_range'</span> : list(p.page_range),  <span class="comment"># 分了多少页 一共有多少页</span></span><br><span class="line">            <span class="string">'message'</span> : <span class="string">'成功'</span>   <span class="comment"># 不懂的人  也知道只是成功了</span></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><em>settings.py 配置</em></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'project'</span>,   <span class="comment"># 子文件  </span></span><br><span class="line">    <span class="string">'rest_framework'</span>  <span class="comment"># 导入rest_framework   需要告诉django配置  我要用这个框架</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>models.py 模型</em></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models   <span class="comment"># 在django中导入模型模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)   <span class="comment"># 书名字段</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'books'</span>   <span class="comment"># 在数据库中显示为books</span></span><br></pre></td></tr></table></figure>
<p><strong><em>路由我就不写了    太easy了</em></strong> </p>
<h2 id="前端-随便用个VUE前端框架吧"><a href="#前端-随便用个VUE前端框架吧" class="headerlink" title="前端   随便用个VUE前端框架吧"></a>前端   随便用个VUE前端框架吧</h2><blockquote>
<p><em>首先你要导入axios<br>在config文件夹中的 index.js文件中   选择跨域的地址</em></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123; <span class="comment">// 使用'/api'来代替'http://f.apiplus.c'</span></span><br><span class="line">                target: <span class="string">'http://127.0.0.1:8001/'</span>, <span class="comment">// 源地址</span></span><br><span class="line">                changeOrigin: <span class="literal">true</span>, <span class="comment">// 改变源</span></span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'^/api'</span>: <span class="string">''</span> <span class="comment">// 路径重写</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure>
<blockquote>
<p><em>在src文件夹中的main.js文件中定义axios</em></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.axios = axios <span class="comment">// 全局注册</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"list"</span>&gt;</span><br><span class="line">     &lt;h1&gt;第&#123;&#123; page_num &#125;&#125;页&lt;<span class="regexp">/h1&gt;   &lt;!-- 页码  显示第几页 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li v-for="i in bookslist"&gt;&#123;&#123;i.name&#125;&#125;&lt;/</span>li&gt;    <span class="xml"><span class="comment">&lt;!-- 循环分页的数据 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sub_page_num"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="comment">&lt;!-- 当点击按钮  执行点击事件  将页码减一 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">"num in page_range"</span> @<span class="attr">click</span>=<span class="string">"change(num)"</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span>   <span class="comment">&lt;!-- 显示一共有多少页 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add_page_num"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span>   <span class="comment">&lt;!-- 当点击按钮  执行点击事件  将页码减一 --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name : 'list',</span></span><br><span class="line"><span class="regexp">  data()&#123;</span></span><br><span class="line"><span class="regexp">    return&#123;</span></span><br><span class="line"><span class="regexp">      page_num : 1,   /</span><span class="regexp">/ 页码 为1   默认显示第一页   也就是进入页面显示为第一页</span></span><br><span class="line"><span class="regexp">      num_pages : 0,   /</span><span class="regexp">/ 最大页码   意思就是最后的页数</span></span><br><span class="line"><span class="regexp">      page_range : [],   /</span><span class="regexp">/ 一共有多少页   意思就是每页显示多少数据  一共几页能全部显示  1,2,3,4</span></span><br><span class="line"><span class="regexp">      bookslist : []   /</span><span class="regexp">/ 被分页的数据</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  mounted()&#123;   /</span><span class="regexp">/ 钩子函数   已进入页面就自动请求服务端   VUE为客户端  Django为服务端</span></span><br><span class="line"><span class="regexp">    this.axios.get('/</span>api/index/<span class="string">').then(res=&gt;&#123;   // 跨域连接Django</span></span><br><span class="line"><span class="string">      console.log(res)   // 打印Django返回的数据</span></span><br><span class="line"><span class="string">      this.num_pages = res.data.num_pages   // 将最大值赋值</span></span><br><span class="line"><span class="string">      this.page_range = res.data.page_range  // 将共有页码赋值</span></span><br><span class="line"><span class="string">      this.bookslist = res.data.bookslist   // 将被分页数据赋值</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  methods:&#123;   // 点击事件</span></span><br><span class="line"><span class="string">    sub_page_num()&#123;   // 上一页</span></span><br><span class="line"><span class="string">      if(this.page_num == 1)&#123;  // 判断页码为1时   证明了已经是最起始的页面</span></span><br><span class="line"><span class="string">        return                 //  直接返回   也就是不做任何操作</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      this.page_num -= 1     //  否则的话  也就是不是第1页  就让他页码减1</span></span><br><span class="line"><span class="string">      this.axios.get('</span>/api/index/?page_num=<span class="string">'+this.page_num).then(res=&gt;&#123;  // 并传递给服务端端   服务端通过传递的页码返回对应页的数据</span></span><br><span class="line"><span class="string">      console.log(res)</span></span><br><span class="line"><span class="string">      this.num_pages = res.data.num_pages</span></span><br><span class="line"><span class="string">      this.page_range = res.data.page_range</span></span><br><span class="line"><span class="string">      this.bookslist = res.data.bookslist</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    add_page_num()&#123;  // 下一页</span></span><br><span class="line"><span class="string">      if(this.page_num == this.num_pages)&#123;   // 判断页码为最大页的时候 证明了 是最后一页了  数据已经展示完了</span></span><br><span class="line"><span class="string">        return   // 直接返回   不做任何操作</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      this.page_num += 1   // 否则  也就是不是最后一页  后面还有数据  就让他页码加1</span></span><br><span class="line"><span class="string">      this.axios.get('</span>/api/index/?page_num=<span class="string">'+this.page_num).then(res=&gt;&#123;  // 并传递给服务端  服务端通过页码返回数据</span></span><br><span class="line"><span class="string">      console.log(res)</span></span><br><span class="line"><span class="string">      this.num_pages = res.data.num_pages</span></span><br><span class="line"><span class="string">      this.page_range = res.data.page_range</span></span><br><span class="line"><span class="string">      this.bookslist = res.data.bookslist</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    change(num)&#123;    // 循环出来的页码  也就是上一页 和下一页  中间的  1,2,3,4,页</span></span><br><span class="line"><span class="string">      this.axios.get('</span>/api/index/?page_num=<span class="string">'+num).then(res=&gt;&#123;   // 通过传递的 页码  来传递给服务端  获取数据</span></span><br><span class="line"><span class="string">      console.log(res)</span></span><br><span class="line"><span class="string">      this.page_num = num</span></span><br><span class="line"><span class="string">      this.num_pages = res.data.num_pages</span></span><br><span class="line"><span class="string">      this.page_range = res.data.page_range</span></span><br><span class="line"><span class="string">      this.bookslist = res.data.bookslist</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
